<div class="bread">
  <ul itemscope itemtype="http://schema.org/BreadcrumbList">
    <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
      <a itemprop="item" href="/">
        <span itemprop="name">C言語</span>
      </a>
      <meta itemprop="position" content="1" />
    </li>
    <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
      <a itemprop="item" href="/library.html">
        <span itemprop="name">C標準ライブラリ</span>
      </a>
      <meta itemprop="position" content="2" />
    </li>
    <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
      <a itemprop="item" href="/library/stdio.html">
        <span itemprop="name">stdio.h</span>
      </a>
      <meta itemprop="position" content="3" />
    </li>
    <li>
      here
    </li>
  </ul>
</div>

<h2>sprintf関数 - フォーマット文字列を文字列変数へ出力</h2>

<b>sprintf関数</b>は、フォーマット文字列を、文字列変数へ出力できる関数です。<a href="/blog/20210419083246.html">printf関数</a>は、標準出力に対して出力しますが、この出力先を<a href="/blog/20201204103322.html">char型</a>の<a href="/blog/20210129143859.html">配列</a>として宣言された文字列変数に変更するものがsprintf関数だと考えてください。sprintf関数は、<a href="/blog/20210418083246.html">stdio.h</a>を読み込むと利用できます。

<pre>
#include <stdio.h>
int sprintf(char *str, const char *format,  ．．． );
</pre>

第一引数は、出力先の文字列です。第二引数はフォーマット文字列で、<a href="/blog/20210419083246.html">printf関数</a>で解説したものと同じものです。第三引数以降は、可変長引数で、printf関数で解説したものと同じものです。

sprintf関数は、バッファオーバーランを起こす可能性のある関数です。

<h3>sprintf関数のサンプル</h3>

sprintf関数のサンプルです。

<pre>
#include <stdio.h>
#include <stdint.h>

int main(void) {
  const char* name = "kimoto";
  int32_t age = 40;
  
  char message[255];
  
  sprintf(message, "I'm %s. Age is %d.", name, age);
  
  printf("%s\n", message);
}
</pre>

出力結果です。

<pre>
I'm kimoto. Age is 40.
</pre>

このサンプルでは、バッファオーバーランを起こすことはありません。

<h3>sprintf関数とバッフォオーバーラン</h3>

sprintf関数とバッフォオーバーランの危険性について書きます。

たとえば、ユーザーの入力によって、フォーマットに埋め込む値が変わると考えてください。たとえば、Web入力フォームで、ユーザーの名前に長さ制限をかけていなかったとします。また、出力先の文字列の長さが短いものだったとします。

<pre>
#include <stdio.h>
#include <stdint.h>

int main(void) {
  const char* name = "long_long_long_name";
  int32_t age = 40;
  
  char message[16];
  
  // バッファオーバーラン!!!
  sprintf(message, "I'm %s. Age is %d.", name, age);
  
  printf("%s\n", message);
}

</pre>

バッファオーバーランが発生すると、意図しないメモリ領域に、データが書き込まれます。これが、具体的個別にどのような問題を起こすかは、僕は詳しくないので、セキュリティエンジニアの方に委ねます。プログラムを記述するエンジニアとしては、バッフォオーバーランを起こしてはならないということを覚えておきましょう。

最大書き込み数を制限できるsnprintf関数もありますので、用途によって使い分けましょう。
