<div class="bread">
  <ul itemscope itemtype="http://schema.org/BreadcrumbList">
    <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
      <a itemprop="item" href="/">
        <span itemprop="name">C言語</span>
      </a>
      <meta itemprop="position" content="1" />
    </li>
    <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
      <a itemprop="item" href="/library.html">
        <span itemprop="name">C標準ライブラリ</span>
      </a>
      <meta itemprop="position" content="2" />
    </li>
    <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
      <a itemprop="item" href="/library/string.html">
        <span itemprop="name">string.h</span>
      </a>
      <meta itemprop="position" content="3" />
    </li>
    <li>
      here
    </li>
  </ul>
</div>

<h2>strlen関数 - 文字列の長さを取得する</h2>

文字列の長さを取得するにはstrlen関数を使用します。<a href="/blog/20210303101711.html">string.h</a>を読み込むと、strlen関数を使用できます。

<pre>
#include <string.h>
size_t strlen(const char *s);
</pre>

C言語では文字列は「\0」で終わるという約束事があります。strlen関数は、この約束事を前提として、文字列の長さを計算します。つまり、「\0」が見つかるまで、ループして、文字数をカウントしていくということです。逆にいえば、文字列が「\0」で終わっていない場合は、意図しないメモリ領域まで進み、バッファオーバーランが起こります。

strlenを使う場合は、文字列が「\0」で終わる文字列に対して使用していることを必ず確認してください。

strlen関数で、文字列の長さを求めるサンプルです。

<pre>
#include <string.h>
#include <stdint.h>
#include <stdio.h>

int main(void) {
  const char* string = "Hello";
  
  int32_t string_length = strlen(string);
  
  printf("%d\n", string_length);
}
</pre>

出力結果です。

<pre>
5
</pre>
